///
/// This file has been generated by bvtidl.pl. DO NOT MODIFY!
///

using System;
using System.Runtime.InteropServices;


namespace BVTSDK
{
/// <summary>
/// The SonarDiscoveryAgent is used to discover any BlueView
/// sonars resident on a network.
/// </summary>
    public class SonarDiscoveryAgent : IDisposable
    {
        public SonarDiscoveryAgent()
        {
            IntPtr p = NativeMethods.BVTSonarDiscoveryAgent_Create();
            _handle = new HandleRef(this, p);
        }

        internal SonarDiscoveryAgent(IntPtr p)
        {
            _handle = new HandleRef(this, p);
        }

        /// Non-deterministic destruction of this object on the Finalizer thread
        ~SonarDiscoveryAgent()
        {
            Dispose(false);
        }

        /// Dispose deterministically
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (_disposed)
                return;
            _disposed = true;
            NativeMethods.BVTSonarDiscoveryAgent_Destroy(_handle);
        }

        /// <summary>
        /// Causes the SonarDiscoveryAgent to begin probing the network for sonars.
        /// </summary>      
        public void Start()
        {
            if (_disposed) throw new ObjectDisposedException("BVTSonarDiscoveryAgent");
            int error_code = NativeMethods.BVTSonarDiscoveryAgent_Start(_handle);
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
        }

        /// <summary>
        /// Causes the SonarDiscoveryAgent to stop probing for sonars.
        /// </summary>      
        public void Stop()
        {
            if (_disposed) throw new ObjectDisposedException("BVTSonarDiscoveryAgent");
            int error_code = NativeMethods.BVTSonarDiscoveryAgent_Stop(_handle);
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
        }

        /// <summary>
        /// Get the number of sonars discovered on the network.
        /// </summary>
        /// <returns>Number of sonars discovered </returns>     
        public int SonarCount
        {
            get
            {
                if (_disposed) throw new ObjectDisposedException("BVTSonarDiscoveryAgent");
                int sonar_count;
                int error_code = NativeMethods.BVTSonarDiscoveryAgent_GetSonarCount(_handle, out sonar_count);
                GC.KeepAlive(this);
                if (0 != error_code)
                    throw new SdkException(error_code);
                return sonar_count;
            }
        }

        /// <summary>
        /// Returns the host IP address (as a null-terminated string) for the specified sonar.
        /// The sonar_index parameter is zero-based, that is, if @ref SonarCount returned a value of 3, then valid sonar_index values are 0, 1, and 2.
        /// A buffer size of 20 characters should be sufficient for the buffer.
        /// </summary>
        /// <param name="sonar_index">Which sonar to return information about </param>
        /// <returns>buffer to hold the null-terminated string to be passed back </returns>     
        public string GetSonarInfo(int sonar_index)
        {
            if (_disposed) throw new ObjectDisposedException("BVTSonarDiscoveryAgent");
            byte[] buffer = new byte[256];
            int buffer_size = 255;
            int error_code = NativeMethods.BVTSonarDiscoveryAgent_GetSonarInfo(_handle, sonar_index, buffer, buffer_size);
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
            return BVTSDK.InteropHelpers.Utf8ToString(buffer);
        }


        /// SDK object pointer
        internal HandleRef Handle
        {
            get { return _handle; }
        }
        private readonly HandleRef _handle;

        private bool _disposed;

        /// P/Invoke 'wrapper' class
        private static class NativeMethods
        {
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern IntPtr BVTSonarDiscoveryAgent_Create();
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern IntPtr BVTSonarDiscoveryAgent_Destroy(HandleRef obj);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTSonarDiscoveryAgent_Start(HandleRef obj);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTSonarDiscoveryAgent_Stop(HandleRef obj);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTSonarDiscoveryAgent_GetSonarCount(HandleRef obj, out int sonar_count);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTSonarDiscoveryAgent_GetSonarInfo(HandleRef obj, int sonar_index, byte[] buffer, int buffer_size);

        }
    }

}
