///
/// This file has been generated by bvtidl.pl. DO NOT MODIFY!
///

using System;
using System.Runtime.InteropServices;


namespace BVTSDK
{
/// <summary>
/// Orientation contains various types of user-accessible parameters useful for specifying the position
/// and orientation of a Head relative to the vessel or ROV.   Ping and Head contain Orientation objects, but
/// this interface allows Orientation objects to be stored independently of a Ping or Head.
/// The Orientation objects can be created and destroyed as needed.   This allows Orientation objects 
/// to be pre-allocated and filled from various instrument sources. It also allows the data to be copied from one
/// Orientation object to the other.
/// NOTE: Orientation objects will only be saved to a sonar of type FILE. 
/// </summary>
    public class Orientation : IDisposable
    {
        public Orientation()
        {
            IntPtr p = NativeMethods.BVTOrientation_Create();
            _handle = new HandleRef(this, p);
        }

        internal Orientation(IntPtr p)
        {
            _handle = new HandleRef(this, p);
        }

        /// Non-deterministic destruction of this object on the Finalizer thread
        ~Orientation()
        {
            Dispose(false);
        }

        /// Dispose deterministically
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (_disposed)
                return;
            _disposed = true;
            NativeMethods.BVTOrientation_Destroy(_handle);
        }

        public const int OR_UNKNOWN = 0;

        public const int OR_HEAD = 1;

        public const int OR_POSITIONER = 2;

        public const int OR_VEHICLE = 3;

        public const int OR_LOCAL_LEVEL = 4;

        public const int OR_MRU = 5;

        public const int OR_GPS = 6;

        public const int OR_IMU = 7;

        public const int OR_ROV = 8;

        public const int OR_UUV = 9;

        public const int OR_OTHER = 10;

        public const int OR_ROTATIONDIRECTION_UNKNOWN = 0;

        public const int OR_ROTATIONDIRECTION_POSITIVE = 1;

        public const int OR_ROTATIONDIRECTION_NEGATIVE = 2;

        public const int OR_ROTATIONAXIS_UNKNOWN = 0;

        public const int OR_ROTATIONAXIS_ROLL = 1;

        public const int OR_ROTATIONAXIS_PITCH = 2;

        public const int OR_ROTATIONAXIS_YAW = 3;

        public const int OR_HEADORIENTATION_UNKNOWN = 0;

        public const int OR_HEADORIENTATION_HORIZONTAL = 1;

        public const int OR_HEADORIENTATION_VERTICAL = 2;

        /// <summary>
        /// Position and orientation of target (e.g. HEAD) relative to source (e.g. POSITIONER).
        /// </summary>
        /// <param name="source">one of the OR_* constants </param>
        /// <param name="target">one of the OR_* constants </param>
        /// <param name="X_axis_degrees">rotation about the X axis </param>
        /// <param name="Y_axis_degrees">rotation about the Y axis </param>
        /// <param name="Z_axis_degrees">rotation about the Z axis </param>
        /// <param name="X_axis_offset">distance of target from source in the X axis (meters)  </param>
        /// <param name="Y_axis_offset">distance of target from source in the Yaxis (meters)  </param>
        /// <param name="Z_axis_offset">distance of target from source in the Z axis (meters)  </param>     
        public void SetData(int source, int target, double X_axis_degrees, double Y_axis_degrees, double Z_axis_degrees, double X_axis_offset, double Y_axis_offset, double Z_axis_offset)
        {
            if (_disposed) throw new ObjectDisposedException("BVTOrientation");
            int error_code = NativeMethods.BVTOrientation_SetData(_handle, source, target, X_axis_degrees, Y_axis_degrees, Z_axis_degrees, X_axis_offset, Y_axis_offset, Z_axis_offset);
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
        }

        /// <summary>
        /// Position of the SOURCE relative to the TARGET.
        /// </summary>
        /// <param name="source">one of the OR_* constants </param>
        /// <param name="target">one of the OR_* constants </param>
        /// <param name="X_axis_degrees">rotation about X axis </param>
        /// <param name="Y_axis_degrees">rotation about Y axis </param>
        /// <param name="Z_axis_degrees">rotation about Z axis </param>
        /// <param name="X_axis_offset">distance of target from source in the X axis (meters) </param>
        /// <param name="Y_axis_offset">distance of target from soruce in the Y axis (meters) </param>
        /// <param name="Z_axis_offset">distance of target from soruce in the Z axis(meters) </param>       
        public void GetData(out int source, out int target, out double X_axis_degrees, out double Y_axis_degrees, out double Z_axis_degrees, out double X_axis_offset, out double Y_axis_offset, out double Z_axis_offset)
        {
            if (_disposed) throw new ObjectDisposedException("BVTOrientation");
            int error_code = NativeMethods.BVTOrientation_GetData(_handle, out source, out target, out X_axis_degrees, out Y_axis_degrees, out Z_axis_degrees, out X_axis_offset, out Y_axis_offset, out Z_axis_offset);
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
        }

        /// <summary>
        /// head_orientation describes how the sonar is oriented in the pan/tilt unit.  
        /// Vertical indicates that the transducer plane is parallel to the pan/tilt unit's base (pan) motor.
        /// Horizontal indicates that the transducer plane is parallel to the elbow (tilt) motor.
        /// Describes how an increase/decrease in pan (x_raw_direction) and tilt (y_raw_direction) position changes the sonar position in the vessel coordinate system. 
        /// Blueview convention is that the x axis is the hardware base motor which pans the sonar and the y axis is the elbow motor which tilts the sonar.
        /// The z axis is currently not used.
        /// </summary>
        /// <param name="head_orientation">one of the OR_HEADORIENTATION_* constants </param>
        /// <param name="x_raw_direction">one of the OR_ROTATIONDIRECTION_* constants </param>
        /// <param name="x_axis_affected">one of the OR_ROTATIONAXIS_* constants </param>
        /// <param name="x_axis_direction">one of the OR_ROTATIONDIRECTION_* constants </param>
        /// <param name="y_raw_direction">one of the OR_ROTATIONDIRECTION_* constants </param>
        /// <param name="y_axis_affected">one of the OR_ROTATIONAXIS_* constants </param>
        /// <param name="y_axis_direction">one of the OR_ROTATIONDIRECTION_* constants </param>
        /// <param name="z_raw_direction">one of the OR_ROTATIONDIRECTION_* constants </param>
        /// <param name="z_axis_affected">one of the OR_ROTATIONAXIS_* constants </param>
        /// <param name="z_axis_direction">one of the OR_ROTATIONDIRECTION_* constants </param>     
        public void SetPanTiltCalibrationData(int head_orientation, int x_raw_direction, int x_axis_affected, int x_axis_direction, int y_raw_direction, int y_axis_affected, int y_axis_direction, int z_raw_direction, int z_axis_affected, int z_axis_direction)
        {
            if (_disposed) throw new ObjectDisposedException("BVTOrientation");
            int error_code = NativeMethods.BVTOrientation_SetPanTiltCalibrationData(_handle, head_orientation, x_raw_direction, x_axis_affected, x_axis_direction, y_raw_direction, y_axis_affected, y_axis_direction, z_raw_direction, z_axis_affected, z_axis_direction);
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
        }

        /// <summary>
        /// head_orientation describes how the sonar is oriented in the pan/tilt unit.  
        /// Vertical indicates that the transducer plane is parallel to the pan/tilt unit's base (pan) motor.
        /// Horizontal indicates that the transducer plane is parallel to the elbow (tilt) motor.
        /// Describes how an increase/decrease in pan (x_raw_direction) and tilt (y_raw_direction) position changes the sonar position in the vessel coordinate system. 
        /// Blueview convention is that the x axis is the hardware base motor which pans the sonar and the y axis is the elbow motor which tilts the sonar.
        /// The z axis is currently not used.
        /// </summary>
        /// <param name="head_orientation">one of the OR_HEADORIENTATION_* constants </param>
        /// <param name="x_raw_direction">one of the OR_ROTATIONDIRECTION_* constants </param>
        /// <param name="x_axis_affected">one of the OR_ROTATIONAXIS_* constants </param>
        /// <param name="x_axis_direction">one of the OR_ROTATIONDIRECTION_* constants </param>
        /// <param name="y_raw_direction">one of the OR_ROTATIONDIRECTION_* constants </param>
        /// <param name="y_axis_affected">one of the OR_ROTATIONAXIS_* constants </param>
        /// <param name="y_axis_direction">one of the OR_ROTATIONDIRECTION_* constants </param>
        /// <param name="z_raw_direction">one of the OR_ROTATIONDIRECTION_* constants </param>
        /// <param name="z_axis_affected">one of the OR_ROTATIONAXIS_* constants </param>
        /// <param name="z_axis_direction">one of the OR_ROTATIONDIRECTION_* constants </param>     
        public void GetPanTiltCalibrationData(out int head_orientation, out int x_raw_direction, out int x_axis_affected, out int x_axis_direction, out int y_raw_direction, out int y_axis_affected, out int y_axis_direction, out int z_raw_direction, out int z_axis_affected, out int z_axis_direction)
        {
            if (_disposed) throw new ObjectDisposedException("BVTOrientation");
            int error_code = NativeMethods.BVTOrientation_GetPanTiltCalibrationData(_handle, out head_orientation, out x_raw_direction, out x_axis_affected, out x_axis_direction, out y_raw_direction, out y_axis_affected, out y_axis_direction, out z_raw_direction, out z_axis_affected, out z_axis_direction);
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
        }

        /// <summary>
        /// Return the timestamp in seconds since 00:00:00 UTC, January 1, 1970 
        /// The timestamp is a standard UNIX time stamp. This is 
        /// a similar value to that returned by the time() C standard library 
        /// function. In fact, the only difference is the addition of fractional seconds.
        /// </summary>
        /// <returns>orientation timestamp </returns>       
        public double Timestamp
        {
            get
            {
                if (_disposed) throw new ObjectDisposedException("BVTOrientation");
                double timestamp;
                int error_code = NativeMethods.BVTOrientation_GetTimestamp(_handle, out timestamp);
                GC.KeepAlive(this);
                if (0 != error_code)
                    throw new SdkException(error_code);
                return timestamp;
            }
        }

        /// <summary>
        /// Set the time stamp.  
        /// </summary>
        /// <param name="sec">Timestamp in seconds since 00:00:00 UTC, January 1, 1970 </param>     
        public void SetTimestamp(double sec)
        {
            if (_disposed) throw new ObjectDisposedException("BVTOrientation");
            int error_code = NativeMethods.BVTOrientation_SetTimestamp(_handle, sec);
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
        }


        /// SDK object pointer
        internal HandleRef Handle
        {
            get { return _handle; }
        }
        private readonly HandleRef _handle;

        private bool _disposed;

        /// P/Invoke 'wrapper' class
        private static class NativeMethods
        {
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern IntPtr BVTOrientation_Create();
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern IntPtr BVTOrientation_Destroy(HandleRef obj);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTOrientation_SetData(HandleRef obj, int source, int target, double X_axis_degrees, double Y_axis_degrees, double Z_axis_degrees, double X_axis_offset, double Y_axis_offset, double Z_axis_offset);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTOrientation_GetData(HandleRef obj, out int source, out int target, out double X_axis_degrees, out double Y_axis_degrees, out double Z_axis_degrees, out double X_axis_offset, out double Y_axis_offset, out double Z_axis_offset);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTOrientation_SetPanTiltCalibrationData(HandleRef obj, int head_orientation, int x_raw_direction, int x_axis_affected, int x_axis_direction, int y_raw_direction, int y_axis_affected, int y_axis_direction, int z_raw_direction, int z_axis_affected, int z_axis_direction);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTOrientation_GetPanTiltCalibrationData(HandleRef obj, out int head_orientation, out int x_raw_direction, out int x_axis_affected, out int x_axis_direction, out int y_raw_direction, out int y_axis_affected, out int y_axis_direction, out int z_raw_direction, out int z_axis_affected, out int z_axis_direction);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTOrientation_GetTimestamp(HandleRef obj, out double timestamp);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTOrientation_SetTimestamp(HandleRef obj, double sec);

        }
    }

}
