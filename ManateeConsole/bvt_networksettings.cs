///
/// This file has been generated by bvtidl.pl. DO NOT MODIFY!
///

using System;
using System.Runtime.InteropServices;


namespace BVTSDK
{
/// <summary>
/// Various network-related parameters.
/// \warning You should not modify these settings unless you carefully record the new
/// parameters!
/// \note A sonar will typically only apply these
/// parameters once per power cycle, at boot.
/// </summary>
    public class NetworkSettings : IDisposable
    {

        internal NetworkSettings(IntPtr p)
        {
            _handle = new HandleRef(this, p);
        }

        /// Non-deterministic destruction of this object on the Finalizer thread
        ~NetworkSettings()
        {
            Dispose(false);
        }

        /// Dispose deterministically
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (_disposed)
                return;
            _disposed = true;
            NativeMethods.BVTNetworkSettings_Destroy(_handle);
        }

        /// <summary>
        /// Set the method by which the sonar obtains an IP address. 
        /// </summary>
        /// <param name="mode">the method by which the sonar obtains an IP address. </param>        
        public void SetAddressMode(AddressMode mode)
        {
            if (_disposed) throw new ObjectDisposedException("BVTNetworkSettings");
            int error_code = NativeMethods.BVTNetworkSettings_SetAddressMode(_handle, ((int) mode));
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
        }

        /// <summary>
        /// Get the method by which the sonar obtains an IP address.
        /// </summary>
        /// <returns>the method by which the sonar obtains an IP address. </returns>        
        public AddressMode AddressMode
        {
            get
            {
                if (_disposed) throw new ObjectDisposedException("BVTNetworkSettings");
                int mode;
                int error_code = NativeMethods.BVTNetworkSettings_GetAddressMode(_handle, out mode);
                GC.KeepAlive(this);
                if (0 != error_code)
                    throw new SdkException(error_code);
                return (AddressMode) mode;
            }
        }

        /// <summary>
        /// Set the sonar's static IP address.
        /// \attention Requires AddressMode to be STATIC
        /// </summary>
        /// <param name="address">A valid IPv4 address that the sonar will use. </param>        
        public void SetIPv4Address(string address)
        {
            if (_disposed) throw new ObjectDisposedException("BVTNetworkSettings");
            int error_code = NativeMethods.BVTNetworkSettings_SetIPv4Address(_handle, BVTSDK.InteropHelpers.StringToUtf8Ptr(address));
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
        }

        /// <summary>
        /// Get the sonar's IP address.
        /// </summary>
        /// <returns>A buffer to hold the sonar's IPv4 address. </returns>      
        public string IPv4Address
        {
            get
            {
                if (_disposed) throw new ObjectDisposedException("BVTNetworkSettings");
                byte[] address = new byte[256];
                int addressLength = 255;
                int error_code = NativeMethods.BVTNetworkSettings_GetIPv4Address(_handle, address, addressLength);
                GC.KeepAlive(this);
                if (0 != error_code)
                    throw new SdkException(error_code);
                return BVTSDK.InteropHelpers.Utf8ToString(address);
            }
        }

        /// <summary>
        /// Set the sonar's static subnet mask.
        /// \attention Requires AddressMode to be STATIC
        /// </summary>
        /// <param name="mask">A valid IPv4 subnet mask that the sonar will use. </param>       
        public void SetSubnetMask(string mask)
        {
            if (_disposed) throw new ObjectDisposedException("BVTNetworkSettings");
            int error_code = NativeMethods.BVTNetworkSettings_SetSubnetMask(_handle, BVTSDK.InteropHelpers.StringToUtf8Ptr(mask));
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
        }

        /// <summary>
        /// Get the sonar's subnet mask address.
        /// </summary>
        /// <returns>A buffer to hold the sonar's subnet mask. </returns>       
        public string SubnetMask
        {
            get
            {
                if (_disposed) throw new ObjectDisposedException("BVTNetworkSettings");
                byte[] mask = new byte[256];
                int maskLength = 255;
                int error_code = NativeMethods.BVTNetworkSettings_GetSubnetMask(_handle, mask, maskLength);
                GC.KeepAlive(this);
                if (0 != error_code)
                    throw new SdkException(error_code);
                return BVTSDK.InteropHelpers.Utf8ToString(mask);
            }
        }

        /// <summary>
        /// Set the sonar's gateway.
        /// \attention Requires AddressMode to be STATIC
        /// </summary>
        /// <param name="gateway">A valid IPv4 gateway address that the sonar will use. </param>        
        public void SetGateway(string gateway)
        {
            if (_disposed) throw new ObjectDisposedException("BVTNetworkSettings");
            int error_code = NativeMethods.BVTNetworkSettings_SetGateway(_handle, BVTSDK.InteropHelpers.StringToUtf8Ptr(gateway));
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
        }

        /// <summary>
        /// Get the sonar's gateway address.
        /// </summary>
        /// <returns>A buffer to hold the sonar's gateway address. </returns>       
        public string Gateway
        {
            get
            {
                if (_disposed) throw new ObjectDisposedException("BVTNetworkSettings");
                byte[] gateway = new byte[256];
                int gatewayLength = 255;
                int error_code = NativeMethods.BVTNetworkSettings_GetGateway(_handle, gateway, gatewayLength);
                GC.KeepAlive(this);
                if (0 != error_code)
                    throw new SdkException(error_code);
                return BVTSDK.InteropHelpers.Utf8ToString(gateway);
            }
        }

        /// <summary>
        /// Set this to true if you want the sonar to launch a DHCP server at boot.
        /// \warning You must not set this to true if the AddressMode is DHCP_CLIENT
        /// </summary>
        /// <param name="enable">Set to true if the sonar should act as a DHCP server. </param>     
        public void SetDHCPServerEnabled(bool enable)
        {
            if (_disposed) throw new ObjectDisposedException("BVTNetworkSettings");
            int error_code = NativeMethods.BVTNetworkSettings_SetDHCPServerEnabled(_handle, (enable ? 1 : 0));
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
        }

        /// <summary>
        /// If true the sonar will launch a DHCP server at boot.
        /// </summary>
        /// <returns>Tue if the sonar will act as a DHCP server. </returns>     
        public bool DHCPServerEnabled
        {
            get
            {
                if (_disposed) throw new ObjectDisposedException("BVTNetworkSettings");
                int is_enabled;
                int error_code = NativeMethods.BVTNetworkSettings_GetDHCPServerEnabled(_handle, out is_enabled);
                GC.KeepAlive(this);
                if (0 != error_code)
                    throw new SdkException(error_code);
                return is_enabled > 0;
            }
        }

        /// <summary>
        /// Set the sonar's IPv4 multicast address.
        /// \attention This is experimental
        /// \see GetPingMulticast
        /// </summary>
        /// <param name="address">The sonar's IPv4 multicast address. </param>      
        public void SetIPv4MulticastAddress(string address)
        {
            if (_disposed) throw new ObjectDisposedException("BVTNetworkSettings");
            int error_code = NativeMethods.BVTNetworkSettings_SetIPv4MulticastAddress(_handle, BVTSDK.InteropHelpers.StringToUtf8Ptr(address));
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
        }

        /// <summary>
        /// Get the sonar's IPv4 multicast address.
        /// \attention This is experimental
        /// \see GetPingMulticast
        /// </summary>
        /// <returns>A buffer to hold the sonar's IPv4 multicast address. </returns>        
        public string IPv4MulticastAddress
        {
            get
            {
                if (_disposed) throw new ObjectDisposedException("BVTNetworkSettings");
                byte[] address = new byte[256];
                int addressLength = 255;
                int error_code = NativeMethods.BVTNetworkSettings_GetIPv4MulticastAddress(_handle, address, addressLength);
                GC.KeepAlive(this);
                if (0 != error_code)
                    throw new SdkException(error_code);
                return BVTSDK.InteropHelpers.Utf8ToString(address);
            }
        }


        /// SDK object pointer
        internal HandleRef Handle
        {
            get { return _handle; }
        }
        private readonly HandleRef _handle;

        private bool _disposed;

        /// P/Invoke 'wrapper' class
        private static class NativeMethods
        {
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern IntPtr BVTNetworkSettings_Destroy(HandleRef obj);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTNetworkSettings_SetAddressMode(HandleRef obj, int mode);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTNetworkSettings_GetAddressMode(HandleRef obj, out int mode);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTNetworkSettings_SetIPv4Address(HandleRef obj, byte[] address);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTNetworkSettings_GetIPv4Address(HandleRef obj, byte[] address, int addressLength);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTNetworkSettings_SetSubnetMask(HandleRef obj, byte[] mask);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTNetworkSettings_GetSubnetMask(HandleRef obj, byte[] mask, int maskLength);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTNetworkSettings_SetGateway(HandleRef obj, byte[] gateway);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTNetworkSettings_GetGateway(HandleRef obj, byte[] gateway, int gatewayLength);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTNetworkSettings_SetDHCPServerEnabled(HandleRef obj, int enable);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTNetworkSettings_GetDHCPServerEnabled(HandleRef obj, out int is_enabled);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTNetworkSettings_SetIPv4MulticastAddress(HandleRef obj, byte[] address);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTNetworkSettings_GetIPv4MulticastAddress(HandleRef obj, byte[] address, int addressLength);

        }
    }

}
