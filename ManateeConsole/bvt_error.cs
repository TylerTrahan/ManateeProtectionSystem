///
/// This file has been generated by bvtidl.pl. DO NOT MODIFY!
///

using System;
using System.Runtime.InteropServices;


namespace BVTSDK
{
/// <summary>
/// The Error object provides access to the SDK's error reporting 
/// system.  This allows the user to map from an error number to 
/// a human readable description of the error.
/// </summary>
    public class Error
    {
        /// <summary>
        /// Return a description of the error
        /// </summary>
        /// <param name="code">Error code </param>      
        public static string GetString(int code)
        {
            return BVTSDK.InteropHelpers.Utf8ToString(NativeMethods.BVTError_GetString(code));
        }

        /// <summary>
        /// Return a the error number as a string.
        /// </summary>
        /// <param name="code">Error code </param>      
        public static string GetName(int code)
        {
            return BVTSDK.InteropHelpers.Utf8ToString(NativeMethods.BVTError_GetName(code));
        }


        /// P/Invoke 'wrapper' class
        private static class NativeMethods
        {
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern IntPtr BVTError_GetString(int code);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern IntPtr BVTError_GetName(int code);

        }
    }

    [System.SerializableAttribute]
    public class SdkException : System.InvalidOperationException
    {
        public SdkException(int returnCode)
        {
            _returnCode = returnCode;
            _errorName = Error.GetName(returnCode);
            _errorMessage = Error.GetString(returnCode);
        }


        public SdkException(System.Runtime.Serialization.SerializationInfo info,
                            System.Runtime.Serialization.StreamingContext context)
                : base(info, context)
        {
            _returnCode = info.GetInt32("_returnCode");
            _errorName = info.GetString("_errorName");
            _errorMessage = info.GetString("_errorMessage");
        }


        public int ReturnCode
        {
             get { return _returnCode; }
        }

        public override string Message
        {
            get
            {
                return string.Format("{0}: {1}", _errorName, _errorMessage);
            }
        }

        [System.Security.Permissions.SecurityPermission(System.Security.Permissions.SecurityAction.LinkDemand, Flags = System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter)]
        public override void GetObjectData(
            System.Runtime.Serialization.SerializationInfo info,
            System.Runtime.Serialization.StreamingContext context)
        {
            base.GetObjectData(info, context);

            info.AddValue("_returnCode", _returnCode);
            info.AddValue("_errorName", _errorName);
            info.AddValue("_errorMessage", _errorMessage);
        }
        private readonly int _returnCode;
        private readonly string _errorName;
        private readonly string _errorMessage;
    }
}
