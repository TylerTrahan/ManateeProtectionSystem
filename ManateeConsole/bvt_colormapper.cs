///
/// This file has been generated by bvtidl.pl. DO NOT MODIFY!
///

using System;
using System.Runtime.InteropServices;


namespace BVTSDK
{
/// <summary>
/// Provide support for applying a colormap to a MagImage, thus 
/// generating a ColorImage.
/// </summary>
    public class ColorMapper : IDisposable
    {
        public ColorMapper()
        {
            IntPtr p = NativeMethods.BVTColorMapper_Create();
            _handle = new HandleRef(this, p);
        }

        internal ColorMapper(IntPtr p)
        {
            _handle = new HandleRef(this, p);
        }

        /// Non-deterministic destruction of this object on the Finalizer thread
        ~ColorMapper()
        {
            Dispose(false);
        }

        /// Dispose deterministically
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (_disposed)
                return;
            _disposed = true;
            NativeMethods.BVTColorMapper_Destroy(_handle);
        }

        /// <summary>
        /// Load a color map file.
        /// </summary>
        /// <param name="file">Colormap file name </param>      
        public void Load(string file)
        {
            if (_disposed) throw new ObjectDisposedException("BVTColorMapper");
            int error_code = NativeMethods.BVTColorMapper_Load(_handle, BVTSDK.InteropHelpers.StringToUtf8Ptr(file));
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
        }

        /// <summary>
        /// Set the gamma used when colormapping.
        /// </summary>
        /// <param name="gamma">Gamma value </param>        
        public void SetGamma(float gamma)
        {
            if (_disposed) throw new ObjectDisposedException("BVTColorMapper");
            int error_code = NativeMethods.BVTColorMapper_SetGamma(_handle, gamma);
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
        }

        /// <summary>
        /// Return the current gamma.
        /// </summary>
        /// <returns>gamma value</returns>      
        public float Gamma
        {
            get
            {
                if (_disposed) throw new ObjectDisposedException("BVTColorMapper");
                float gamma;
                int error_code = NativeMethods.BVTColorMapper_GetGamma(_handle, out gamma);
                GC.KeepAlive(this);
                if (0 != error_code)
                    throw new SdkException(error_code);
                return gamma;
            }
        }

        /// <summary>
        /// Set the intensity values to be mapped to the top and bottom of the colormap. 
        /// If auto intensity is enabled, this function returns an error.
        /// </summary>
        /// <param name="top">Top colormap threshold (aka intensity) </param>
        /// <param name="bottom">Bottom colormap threshold </param>     
        public void SetThresholds(int top, int bottom)
        {
            if (_disposed) throw new ObjectDisposedException("BVTColorMapper");
            int error_code = NativeMethods.BVTColorMapper_SetThresholds(_handle, top, bottom);
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
        }

        /// <summary>
        /// Return the upper threshold for the colormap.  The top threshold is also
        /// known as 'intensity'.  Lowering the top threshold will make a brighter image.
        /// </summary>
        /// <returns>upper threshold</returns>      
        public int TopThreshold
        {
            get
            {
                if (_disposed) throw new ObjectDisposedException("BVTColorMapper");
                int threshold;
                int error_code = NativeMethods.BVTColorMapper_GetTopThreshold(_handle, out threshold);
                GC.KeepAlive(this);
                if (0 != error_code)
                    throw new SdkException(error_code);
                return threshold;
            }
        }

        /// <summary>
        /// Return the lower threshold for the colormap.
        /// </summary>
        /// <returns>lower threshold</returns>      
        public int BottomThreshold
        {
            get
            {
                if (_disposed) throw new ObjectDisposedException("BVTColorMapper");
                int threshold;
                int error_code = NativeMethods.BVTColorMapper_GetBottomThreshold(_handle, out threshold);
                GC.KeepAlive(this);
                if (0 != error_code)
                    throw new SdkException(error_code);
                return threshold;
            }
        }

        /// <summary>
        /// Return true if auto-threshold is enabled, false if it's not.
        /// </summary>
        /// <returns>True if auto-threshold is enabled, false if it's not</returns>     
        public bool AutoMode
        {
            get
            {
                if (_disposed) throw new ObjectDisposedException("BVTColorMapper");
                int is_enabled;
                int error_code = NativeMethods.BVTColorMapper_GetAutoMode(_handle, out is_enabled);
                GC.KeepAlive(this);
                if (0 != error_code)
                    throw new SdkException(error_code);
                return is_enabled > 0;
            }
        }

        /// <summary>
        /// Enable or disable an internal auto-threshold algorithm.
        /// </summary>
        /// <param name="enable">> 0 if auto-threshold should be enabled. 0 otherwise. </param>     
        public void SetAutoMode(bool enable)
        {
            if (_disposed) throw new ObjectDisposedException("BVTColorMapper");
            int error_code = NativeMethods.BVTColorMapper_SetAutoMode(_handle, (enable ? 1 : 0));
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
        }

        /// <summary>
        /// Get the lowest value the top threshold is allowed to attain while auto mode is enabled.
        /// </summary>
        /// <returns>The lowest value the top threshold can attain. </returns>      
        public int AutoModeTopThresholdMinimum
        {
            get
            {
                if (_disposed) throw new ObjectDisposedException("BVTColorMapper");
                int top_minimum;
                int error_code = NativeMethods.BVTColorMapper_GetAutoModeTopThresholdMinimum(_handle, out top_minimum);
                GC.KeepAlive(this);
                if (0 != error_code)
                    throw new SdkException(error_code);
                return top_minimum;
            }
        }

        /// <summary>
        /// Set the lowest value the top threshold is allowed to attain while auto mode is enabled.
        /// </summary>
        /// <param name="top_minimum">The lowest value the top threshold can attain. </param>       
        public void SetAutoModeTopThresholdMinimum(int top_minimum)
        {
            if (_disposed) throw new ObjectDisposedException("BVTColorMapper");
            int error_code = NativeMethods.BVTColorMapper_SetAutoModeTopThresholdMinimum(_handle, top_minimum);
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
        }

        /// <summary>
        /// Inverts the color mapping process to determine the intensity value for a given image pixel.
        /// If the color provided is not an entry of this colormap, the returned intensity is zero.
        /// </summary>
        /// <param name="color">The 32bit, 4 channel RGBA color to look up. See BVTColorImage.GetPixel() </param>
        /// <returns>The intensity that corresponds to this color. </returns>       
        public UInt16 PixelIntensity(UInt32 color)
        {
            if (_disposed) throw new ObjectDisposedException("BVTColorMapper");
            UInt16 intensity;
            int error_code = NativeMethods.BVTColorMapper_PixelIntensity(_handle, color, out intensity);
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
            return intensity;
        }

        /// <summary>
        /// Apply a colormap to an intensity image to produce a ColorImage.
        /// </summary>
        /// <param name="input">Input magnitude image </param>
        /// <returns>Output color image </returns>      
        public ColorImage MapImage(MagImage input)
        {
            IntPtr output_ptr = new IntPtr();
            if (_disposed) throw new ObjectDisposedException("BVTColorMapper");
            int error_code = NativeMethods.BVTColorMapper_MapImage(_handle, input.Handle, ref output_ptr);
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
            ColorImage output = new ColorImage(output_ptr);
            return output;
        }

        /// <summary>
        /// Gets the RGB color that is mapped to a maximum intensity return
        /// </summary>
        /// <param name="r">The red value assigned to pixels of maximum intensity </param>
        /// <param name="g">The green value assigned to pixels of maximum intensity </param>
        /// <param name="b">The blue value assigned to pixels of maximum intensity </param>     
        public void GetTopColor(out UInt32 r, out UInt32 g, out UInt32 b)
        {
            if (_disposed) throw new ObjectDisposedException("BVTColorMapper");
            int error_code = NativeMethods.BVTColorMapper_GetTopColor(_handle, out r, out g, out b);
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
        }

        /// <summary>
        /// Gets the RGB color that is mapped to a minimum intensity return
        /// </summary>
        /// <param name="r">The red value assigned to pixels of minimum intensity </param>
        /// <param name="g">The green value assigned to pixels of minimum intensity </param>
        /// <param name="b">The blue value assigned to pixels of minimum intensity </param>     
        public void GetBottomColor(out UInt32 r, out UInt32 g, out UInt32 b)
        {
            if (_disposed) throw new ObjectDisposedException("BVTColorMapper");
            int error_code = NativeMethods.BVTColorMapper_GetBottomColor(_handle, out r, out g, out b);
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
        }

        /// <summary>
        /// Return the number of color entries in this colormap.
        /// </summary>
        /// <returns>The number of color entries in this colormap </returns>        
        public int ColorValuesCount
        {
            get
            {
                if (_disposed) throw new ObjectDisposedException("BVTColorMapper");
                int count;
                int error_code = NativeMethods.BVTColorMapper_GetColorValuesCount(_handle, out count);
                GC.KeepAlive(this);
                if (0 != error_code)
                    throw new SdkException(error_code);
                return count;
            }
        }

        /// <summary>
        /// Return the color of the entry at the specified index.
        /// </summary>
        /// <param name="index">The zero-based index of the color entry to query </param>
        /// <param name="red">red </param>
        /// <param name="green">green </param>
        /// <param name="blue">blue </param>
        /// <param name="alpha">reserved </param>       
        public void GetColorValue(int index, out UInt32 red, out UInt32 green, out UInt32 blue, out UInt32 alpha)
        {
            if (_disposed) throw new ObjectDisposedException("BVTColorMapper");
            int error_code = NativeMethods.BVTColorMapper_GetColorValue(_handle, index, out red, out green, out blue, out alpha);
            GC.KeepAlive(this);
            if (0 != error_code)
                throw new SdkException(error_code);
        }


        /// SDK object pointer
        internal HandleRef Handle
        {
            get { return _handle; }
        }
        private readonly HandleRef _handle;

        private bool _disposed;

        /// P/Invoke 'wrapper' class
        private static class NativeMethods
        {
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern IntPtr BVTColorMapper_Create();
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern IntPtr BVTColorMapper_Destroy(HandleRef obj);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTColorMapper_Load(HandleRef obj, byte[] file);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTColorMapper_SetGamma(HandleRef obj, float gamma);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTColorMapper_GetGamma(HandleRef obj, out float gamma);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTColorMapper_SetThresholds(HandleRef obj, int top, int bottom);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTColorMapper_GetTopThreshold(HandleRef obj, out int threshold);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTColorMapper_GetBottomThreshold(HandleRef obj, out int threshold);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTColorMapper_GetAutoMode(HandleRef obj, out int is_enabled);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTColorMapper_SetAutoMode(HandleRef obj, int enable);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTColorMapper_GetAutoModeTopThresholdMinimum(HandleRef obj, out int top_minimum);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTColorMapper_SetAutoModeTopThresholdMinimum(HandleRef obj, int top_minimum);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTColorMapper_PixelIntensity(HandleRef obj, UInt32 color, out UInt16 intensity);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTColorMapper_MapImage(HandleRef obj, HandleRef input, ref IntPtr output);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTColorMapper_GetTopColor(HandleRef obj, out UInt32 r, out UInt32 g, out UInt32 b);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTColorMapper_GetBottomColor(HandleRef obj, out UInt32 r, out UInt32 g, out UInt32 b);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTColorMapper_GetColorValuesCount(HandleRef obj, out int count);
            [DllImport("bvtsdk4", CallingConvention=CallingConvention.Cdecl)]
            public static extern int BVTColorMapper_GetColorValue(HandleRef obj, int index, out UInt32 red, out UInt32 green, out UInt32 blue, out UInt32 alpha);

        }
    }

}
